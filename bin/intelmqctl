#!/usr/bin/env python

import sys
import re
import os
import json
import shlex
import inspect
import psutil
import signal
import argparse


CONFIGURATION_FILE = "/etc/intelmq/startup.conf"


def read_option(num_options):
    option = raw_input("\nChoose option: ")
    try:
        option = int(option)
        if option <= num_options and option > 0:
            return option-1

    except ValueError:
        print "Error!"
        sys.exit(1)


def save_pidfile(bot_id, piddata):
    filename = "/var/run/intelmq/%s.pid" % bot_id
    fp = open(filename, "w")
    fp.write(json.dumps(piddata))
    fp.close()
    
def load_pidfile(bot_id):
    filename = "/var/run/intelmq/%s.pid" % bot_id
    fp = open(filename, "r")
    piddata = fp.read()
    fp.close()
    os.remove(filename)
    return json.loads(piddata)
        
def exists_pidfile(bot_id):
    filename = "/var/run/intelmq/%s.pid" % bot_id
    return os.path.isfile(filename)
    
    


class IntelMQContoller():
    
    def __init__(self):
        
        APPNAME = "intelmqctl"
        VERSION = "0.0.0"
        DESCRIPTION = "description: intelmqctl is the tool to control intelmq system"
        USAGE = '''
        intelmqctl --bot [start|stop|restart|reload] --id=cymru-expert
        intelmqctl --botnet [start|stop|restart|reload]'''
        
        parser = argparse.ArgumentParser(
                                        prog=APPNAME,
                                        usage=USAGE,
                                        epilog=DESCRIPTION
                                        )

        group = parser.add_mutually_exclusive_group()
        group_list = group.add_mutually_exclusive_group()
        
        parser.add_argument('-v', '--version', action='version', version=VERSION)
        parser.add_argument("--id", dest='bot_id', default=None, help='bot ID')
        
        group_list.add_argument('--bot',      choices=['start', 'stop', 'restart', 'status'], metavar='[start|stop|restart|reload|status]', default=None)
        group_list.add_argument('--botnet',   choices=['start', 'stop', 'restart', 'status'], metavar='[start|stop|restart|reload|status]', default=None)
        group_list.add_argument('--list',     choices=['bots'],                                 metavar='[list|edit]'                       , default=None)

        self.args = parser.parse_args()
        
        if self.args.bot_id and not self.args.bot:
            print "usage: %s" % USAGE
            print "%s: error: argument --id: expected argument --bot [start|stop|restart|reload|status]" % APPNAME
            exit()

        fp = open(CONFIGURATION_FILE, 'r')
        data = fp.read()
        self.info = json.loads(data)


    def auto_method_call(self, method):
        inspect_members = inspect.getmembers(self)
        for name, func in inspect_members:
            if name.startswith(method):
                return func        

    
    def run(self):
        if self.args.bot:
            method_name = "bot_" + self.args.bot
            call_method = self.auto_method_call(method_name)
            call_method(self.args.bot_id)
            
        elif self.args.botnet:
            method_name = "botnet_" + self.args.botnet
            call_method = self.auto_method_call(method_name)
            call_method()
            
        elif self.args.list:
            method_name = "list_" + self.args.list
            call_method = self.auto_method_call(method_name)
            call_method()

    
    def log_bot(self, bot_id, message):
        print " %s bot %s." % (bot_id, message)
        
        
    def log_botnet(self, message):
        print " Botnet %s." % (message)


    def bot_start(self, bot_id):        
        if exists_pidfile(bot_id):
            self.log_bot(bot_id, "is already running")
            return
        self.__bot_start(bot_id, self.info[bot_id]['module'])

        
    def __bot_start(self, bot_id, module):
        cmd = "python -m %s %s" % (module, bot_id)
        args = shlex.split(cmd)
        p = psutil.Popen(args)
        piddata = { "pid": p.pid,
                    "bot_id": bot_id,
                    "module": module
                  }
        save_pidfile(bot_id, piddata)
        
        
    def bot_stop(self, bot_id):
        if not exists_pidfile(bot_id):
            self.log_bot(bot_id, "is not running")
            return
        return self.__bot_stop(bot_id)
        
        
    def __bot_stop(self, bot_id):
        piddata = load_pidfile(bot_id)
        p = psutil.Process(piddata['pid'])
        p.send_signal(signal.SIGINT)
        return piddata
        
        
    def bot_restart(self, bot_id):
        piddata = self.bot_stop(bot_id)
        self.__bot_start(piddata['bot_id'], piddata['module'])
    
    
    def bot_status(self, bot_id):
        if exists_pidfile(bot_id):
            self.log_bot(bot_id, "is running")
        else:
            self.log_bot(bot_id, "is not running")

    
    def botnet_start(self):
        self.log_botnet("is starting")
        for bot_id in self.info.keys():
            self.bot_start(bot_id)
        self.log_botnet("started")    
    
    def botnet_stop(self):
        self.log_botnet("is stopping")
        for bot_id in self.info.keys():
            self.bot_stop(bot_id)
        self.log_botnet("stopped")
    
    def botnet_restart(self):
        self.log_botnet("is restarting")
        for bot_id in self.info.keys():
            self.bot_restart(bot_id)
        self.log_botnet("restarted")
    
    def botnet_status(self):
        print "botnet_status"
        
    def botnet_force_shutdown(self):
        ''' TBD '''
        
    def list_bots(self):
        title = "\n\nList of Bots:\n"
        title += "-" * (len(title)-1)
        title += "\n"
        print title
        for bot_id in self.info.keys():
            print "Bot ID: %s\nDescription: %s\n" % (bot_id, self.info[bot_id]['description'])
    
    
x = IntelMQContoller()
x.run()
