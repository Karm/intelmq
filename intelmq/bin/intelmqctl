#!/usr/bin/env python

import re
import os
import sys
import json
import time
import shlex
import inspect
import psutil
import signal
import argparse


CONFIGURATION_FILE = "/etc/intelmq/startup.conf"
PIDDIR = "/var/run/intelmq/"
PIDFILE = "/var/run/intelmq/%s.pid"

STATUSES = {
    'starting': 0,
    'running': 1,
    'stopping': 2,
    'stopped': 3
}

MESSAGES = {
    'starting': 'Starting %s...',
    'running': '%s is already running.',
    'stopped': '%s is stopped.',
    'stopping': 'Stopping %s...'
}

ERROR_MESSAGES = {
    'starting': '%s failed to START.',
    'running': '%s is still running.',
    'stopped': '%s was NOT RUNNING.',
    'stopping': '%s failed to STOP.'
}

RETURN_TYPES = ['text', 'json']
RETURN_TYPE = None

def log_bot_error(bot_id, status):
    if RETURN_TYPE == 'text':
        print ERROR_MESSAGES[status] % bot_id
    
def log_bot_message(bot_id, status):
    if RETURN_TYPE == 'text':
        print MESSAGES[status] % bot_id

def log_botnet_error(status):
    if RETURN_TYPE == 'text':
        print ERROR_MESSAGES[status] % 'Botnet'
    
def log_botnet_message(status):
    if RETURN_TYPE == 'text':
        print MESSAGES[status] % 'Botnet'
       
def write_pidfile(bot_id, pid):
    filename = PIDFILE % bot_id
    with open(filename, 'w') as fp:
        fp.write(str(pid))

def remove_pidfile(bot_id):
    filename = PIDFILE % bot_id
    os.remove(filename)

def read_pidfile(bot_id):
    filename = PIDFILE % bot_id
    if check_pidfile(bot_id):
        with open(filename, 'r') as fp:
            pid = fp.read()
        return pid.strip()
    return None

def check_pidfile(bot_id):
    filename = PIDFILE % bot_id
    if os.path.isfile(filename):
        try:
            with open(filename, 'r') as fp:
                pid = fp.read()
            return int(pid.strip())
        except ValueError:
            return None
    return None
        
def start_process(bot_id, cmd):
    args = shlex.split(cmd)
    p = psutil.Popen(args)
    return p.pid

def stop_process(pid):
    p = psutil.Process(int(pid))
    p.send_signal(signal.SIGINT)
    
def status_process(pid):
    try:
        psutil.Process(int(pid))
        return True
    except psutil.NoSuchProcess:
        return False
    
    



class IntelMQContoller():
    def __init__(self):
        global RETURN_TYPE
        
        APPNAME = "intelmqctl"
        VERSION = "0.0.0"
        DESCRIPTION = "description: intelmqctl is the tool to control intelmq system"
        USAGE = '''
        intelmqctl --bot [start|stop|restart|status] --id=cymru-expert
        intelmqctl --botnet [start|stop|restart|status]
        intelmqctl --list [bots]'''
        
        parser = argparse.ArgumentParser(
                                        prog=APPNAME,
                                        usage=USAGE,
                                        epilog=DESCRIPTION
                                        )
        
        group = parser.add_mutually_exclusive_group()
        group_list = group.add_mutually_exclusive_group()
        
        parser.add_argument('-v', '--version', action='version', version=VERSION)
        parser.add_argument("--id", dest='bot_id', default=None, help='bot ID')
        parser.add_argument('--type', choices=RETURN_TYPES, default=RETURN_TYPES[0], help='choose if it should return regular text or other forms of output')
        
        group_list.add_argument('--bot',      choices=['start', 'stop', 'restart', 'status'], metavar='[start|stop|restart|status]', default=None)
        group_list.add_argument('--botnet',   choices=['start', 'stop', 'restart', 'status'], metavar='[start|stop|restart|status]', default=None)
        group_list.add_argument('--list',     choices=['bots'],                               metavar='[bots]'                     , default=None)
        
        self.args = parser.parse_args()
        
        if len(sys.argv) == 1:
            parser.print_help()
        
        if self.args.bot_id and not self.args.bot:
            print "usage: %s" % USAGE
            print "%s: error: argument --id: expected argument --bot [start|stop|restart|status]" % APPNAME
            exit()
            
        RETURN_TYPE = self.args.type
        
        fp = open(CONFIGURATION_FILE, 'r')
        data = fp.read()
        self.info = json.loads(data)
        
        if not os.path.exists(PIDDIR):
            os.makedirs(PIDDIR)
        
    
    def auto_method_call(self, method):
        inspect_members = inspect.getmembers(self)
        for name, func in inspect_members:
            if name.startswith(method):
                return func

    
    def run(self):
        if self.args.bot:
            method_name = "bot_" + self.args.bot
            call_method = self.auto_method_call(method_name)
            results = call_method(self.args.bot_id)
            
        elif self.args.botnet:
            method_name = "botnet_" + self.args.botnet
            call_method = self.auto_method_call(method_name)
            results = call_method()
            
        elif self.args.list:
            method_name = "list_" + self.args.list
            call_method = self.auto_method_call(method_name)
            results = call_method()
        
        if self.args.type == 'json':
            print json.dumps(results)


    def bot_start(self, bot_id):        
        pid = read_pidfile(bot_id)
        if pid:
            if status_process(pid):
                log_bot_message(bot_id, 'running')
                return 'running'
            else:
                remove_pidfile(bot_id)
        log_bot_message(bot_id, 'starting')
        self.__bot_start(bot_id, self.info[bot_id]['module'])
        #time.sleep(0.25)
        return 'starting'

        
    def __bot_start(self, bot_id, module):
        cmd = "python -m %s %s" % (module, bot_id)
        pid = start_process(bot_id, cmd)
        write_pidfile(bot_id, pid)
        
        
    def bot_stop(self, bot_id):
        pid = read_pidfile(bot_id)
        if not pid:
            log_bot_error(bot_id, 'stopped')
            return 'stopped'
        if not status_process(pid):
            remove_pidfile(bot_id)
            log_bot_error(bot_id, 'stopped')
            return 'stopped'
        log_bot_message(bot_id, 'stopping')
        res = self.__bot_stop(bot_id, pid)
        time.sleep(0.25)
        if status_process(pid):
            log_bot_error(bot_id, 'running')
            return 'running'
        
        return 'stopped'
        
    def __bot_stop(self, bot_id, pid):
        stop_process(pid)
        remove_pidfile(bot_id)    


    def bot_restart(self, bot_id):
        status_stop = self.bot_stop(bot_id)
        status_start = self.bot_start(bot_id)
        return (status_stop, status_start)
    
    
    def bot_status(self, bot_id):
        pid = read_pidfile(bot_id)
        if pid and status_process(pid):
            log_bot_message(bot_id, 'running')
            return 'running'
        log_bot_message(bot_id, 'stopped')
        return 'stopped'

    
    def botnet_start(self):
        botnet_status = {}
        log_botnet_message('starting')
        for bot_id in sorted(self.info.keys()):
            botnet_status[bot_id] = self.bot_start(bot_id)
        log_botnet_message('running')
        return botnet_status
    
    
    def botnet_stop(self):
        botnet_status = {}
        log_botnet_message('stopping')
        for bot_id in sorted(self.info.keys()):
            botnet_status[bot_id] = self.bot_stop(bot_id)
        log_botnet_message('stopped')
        return botnet_status
    
    def botnet_restart(self):
        botnet_status = {}
        log_botnet_message('stopping')
        for bot_id in sorted(self.info.keys()):
            botnet_status[bot_id] = tuple(self.bot_stop(bot_id))
        time.sleep(3)
        log_botnet_message('stopped')
        log_botnet_message('starting')
        for bot_id in sorted(self.info.keys()):
            botnet_status[bot_id] += tuple(self.bot_start(bot_id))
        log_botnet_message('started')
        return botnet_status
    
    
    def botnet_status(self):
        botnet_status = {}
        for bot_id in sorted(self.info.keys()):
            botnet_status[bot_id] = self.bot_status(bot_id)
        return botnet_status

    
    def list_bots(self):
        title = "\n\nList of Bots:\n"
        title += "-" * (len(title)-1)
        title += "\n"
        print title
        for bot_id in sorted(self.info.keys()):
            print "Bot ID: %s\nDescription: %s\n" % (bot_id, self.info[bot_id]['description'])
            
    
if __name__ == "__main__":
    x = IntelMQContoller()
    x.run()
